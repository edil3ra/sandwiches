* Installation
  virtualenv -p python2.7 _env
  source _env/bin/activate
* Description
** Technologies
*** Backend
	I choose [[http://flask.pocoo.org/][flask]] for the backend, I hesitaded between django and Flask, both could do the job, but I want a light solution.

Sqlite for the database, you can change the database very easly as everything is done through an orm, sqlite, is just esaier for testing, but it lack good migration support.

Sqalchemy for orm, flask provide a wrapper around it so it's a perfect match.

*** Front end
	materialize for the css front.
	Jquery for small animation .
	I do not used npm bower, or any package system to handle the depedencies, i just copy what i need or used cdn, this is ugly but it speed the setting process.

** Environement
   The application will has 3 different environement, one for deveolping, one for unittest one for the production.
   Default setting are provide for all the enviroment, it's possible to rewrite some setting by environment variables

*** environment variable that you want to change
	FLASK_CONFIG *To choose the dev, prod, test environement*
    SECRET_KEY *To secure the app*
	SQLALCHEMY_DATABASE_URI *For configuring the database*
    MAIL_USERNAME *To manage the mail sender username*
    MAIL_PASSWORD *To manage the mail sender password*
    DEFAULT_SHOP_EMAIL *Shop default email* 

    ADMIN_EMAIL *Admin default email* | must be set for production mode
    ADMIN_PASSWORD *Admin default password* | must be set production mode
    COMPANY_ADDRESS *The addres of the company* (when the email is sended it will craft it with this variable)

** Depedencies
*** General
	+ [[http://www.sqlalchemy.org/][SQL-Alchemy]] *Orm*
	+ [[http://flask-sqlalchemy.pocoo.org/2.1/][Flask-SQLAlchemy]] *Wrapper around sqlachemy*
	+ [[http://flask-script.readthedocs.io/en/latest/][Flask-Script]] *To Debug, test, create personnal command, having a developing server...*
	+ [[http://flask-migrate.readthedocs.io/en/latest/][Flask-Migrate]] *To have a migration system*
	+ [[https://pypi.python.org/pypi/Flask-Login][Flask-Login]] *To handle the authentication*
	+ [[http://pythonhosted.org/Flask-Mail/][Flask-Mail]] *To handle mail*
*** Developing
	+ [[https://pypi.python.org/pypi/Flask-DebugToolbar][Flask-DebugToolbar]]
	+ jedi
	+ flake8
    + importmagic
    + ipython==4.2.1;"
*** Testing
	blank
*** Production
	blank

* Analyse
** Database
*** User
**** Description
	 The is used to authenticate the user, it can have 3 different status that give them different permission on the application, the permission will be handle by 3 boolean (is_admin, is_employe, is_manager). The User can be all of them or none of them, of course if they are none of them, the application is pointless.
The password will be hashed, the address mail must be unique because it used to authenticate the user.
**** Model
	+ email :: String
	+ password :: String
	+ is_admin :: boolean
	+ is_employee :: boolean
	+ is_manager :: boolean
	+ confirmed :: boolean

*** Employee
**** Description
	 The Employee is an exstention of the user, it' s a one to one relationship with a user.
	 First reason is we don't want the user to have useless information if they are not customers.
	 Second reason is the orders table will be linked by a customer not by a user.
**** Model
	 + name :: String
	 + salary :: Int
	 + picture :: String | *Not Required*
	 + user_id :: Foreign key
	 + orders :: Many relationship -- Order
*** Shop
**** Description
	 The shop has information to identify it.
**** Model
	+ name :: String
	+ email :: String
	+ telephone :: String
	+ address :: String
	+ items :: Many relationship -- Item
	+ commands :: Many relationship -- Command
		  
*** Food
**** Description
	 Food by shop
	 Item can be identified as extra (usefull for order without Employee associated to)
**** Model
	+ name :: String
	+ price :: Float
	+ extra :: Boolean
	+ shop_id :: Foreign key 
	+ orders :: Many relation ship --  Order

*** Command
**** Description
	 The command can be in those four states:
    + PREPARING: when the command is not sended
    + WAITING: when the command is sended but not recieve yet
    + DELIVERED: when the command is recieved
    + NEVER_DELIVERED: when the command is canceled because it was neve delivered
**** Model
	 + delivery_address :: address of the deliveraison (society name)
	 + sended :: datetime (the time command was send)
	 + recieved :: datetime (the time command was recieve) *Not Required*
     + status :: int | default PREPARING
	 + shop :: Foreign key
     + user :: Foreign key :: The user who made the command, it only make sense to put user manager user in it
	 + orders :: Many relationship -- Order
	 
*** Order
**** Description
	 the order represent a food
**** Model
	 + food_id :: Foreign Key 
	 + command_id :: Foreign Key
	 + employee_id :: Foreign Key | *Not Required*

** Architecture
   the application will have 4 differents parts, that will be handle by flask as blueprint.
*** authentication
	
**** views
	 + Sign in
	 + Log in
	 + Log Out
	 + Validate account
	 + Resend validation
	   
**** features
	+ login_required decorator
	+ is_employee decorator
	+ is_manager decorator
	+ is_admin decorator

**** forms
	 Login form
	 Sign in Form
	 
*** main 
**** views
	 + main (a list of items filtered by the current command)
	   + A list of items will be presented to the current user
	   + An add button to add the item
	   + A cancel button to reset the item count to 0
	   + A Register button, to handle the current command 
	 + history
	   + List of previous command
		 
**** Form
	 User Command form
	 
*** manager
**** views
	 + new command
	 + crud for the shop
	 + crud for the items
	 + list of current orders for the command 

**** features
	 + create and edit shop
	 + create and edit items
	 + make a new command
	 + edit the current command
	 + passed the command as done
	   
**** forms
	 + Shop Form
	 + Item Form

*** admin
	TODO

* Tasks
** Boilerplate [4/4]
   + [X] make an hello world
   + [X] make a base template
   + [X] make a template for the main blueprint
   + [X] integrate materialize

** Dependencies settings installation [5/6]
	+ [X] Flask-Script
	+ [X] Flask-Debugtollbar
	+ [X] Flask-SQLAlchemy
	+ [X] Flask-Migrate 
	+ [X] Flask-Login
	+ [ ] Flask-mail

** Dependencies settings configuration [5/6]
	+ [X] Flask-Script
	+ [X] Flask-Debugtollbar
	+ [X] Flask-SQLAlchemy
	+ [X] Flask-Migrate 
	+ [X] Flask-Login
	+ [ ] Flask-mail

** Models [8/8]
   + [X] create the User model
   + [X] create the Employee model
   + [X] create the Shop model
   + [X] create the Food model
   + [X] create the Command model
   + [X] create the Order model
   + [X] refactor the command to change the status
   + [X] Add anonymous user
   + [X] Tell to the login_manager instance how to find user
** Fake [15/15]
   + [X] create default admin
   + [X] create a  default shop for te admin
   + [X] create a default command for the admin
   + [X] create managers
   + [X] create employees
   + [X] create shops
   + [X] create foods
   + [X] create commands
   + [X] create orders
   + [X] Refactor the command to change status
   + [X] Create a default command with preparing status done with admin
   + [X] Refactor the orders to hit all the commands
   + [X] Refactor the create foods to create foods by shop
   + [X] Create a default list for food items to make it more realist
   + [X] Change the names of the foods with the foods list
	 
** Blueprint setting [2/4]
   + [X] Create the main blueprint
   + [X] Create the auth blueprint
   + [ ] Create the manager blueprint
   + [ ] Create the admin blueprint

** auth [3/3]
   + [X] Create login form
   + [X] create the view for the login 
   + [X] Add sign in button for the login form
   + [ ] Handle login session
   + [ ] Add decorator for protect specific route
	 
** Config setting [4/4]
   + [X] Create the basic config
   + [X] Create the development config
   + [X] Create the testing config
   + [X] Create the production config


* Utils
#+BEGIN_SRC shell 
find . -name '*.pyc' -delete
#+END_SRC

#+RESULTS:

#+BEGIN_SRC shell :results scalar
python manage.py routes
#+END_SRC

#+RESULTS:
: _debug_toolbar.static                              HEAD,OPTIONS,GET     /_debug_toolbar/static/[filename]
: auth.index                                         HEAD,OPTIONS,GET     /auth/
: debugtoolbar.save_template                         POST,OPTIONS         /_debug_toolbar/views/template/[key]/save
: debugtoolbar.sql_select                            HEAD,POST,OPTIONS,GET /_debug_toolbar/views/sqlalchemy/sql_explain
: debugtoolbar.sql_select                            HEAD,POST,OPTIONS,GET /_debug_toolbar/views/sqlalchemy/sql_select?explain=[explain]
: debugtoolbar.template_editor                       HEAD,OPTIONS,GET     /_debug_toolbar/views/template/[key]
: debugtoolbar.template_preview                      POST,OPTIONS         /_debug_toolbar/views/template/[key]
: main.index                                         HEAD,OPTIONS,GET     /
: static                                             HEAD,OPTIONS,GET     /static/[filename]



